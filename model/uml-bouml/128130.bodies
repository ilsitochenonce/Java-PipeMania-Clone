class GameCore
!!!128130.java!!!	stop() : void

        isRunning = false;
!!!128258.java!!!	run() : void

        try {
            init();
            gameLoop();
        }
        finally {
            screen.restoreScreen();
            lazilyExit();
        }
!!!128386.java!!!	lazilyExit() : void

        Thread thread = new Thread() {
            @Override
            public void run() {
                // first, wait for the VM exit on its own.
                try {
                    Thread.sleep(2000);
                }
                catch (InterruptedException ex) { }
                // system is still running, so force an exit
                System.exit(0);
            }
        };
        thread.setDaemon(true);
        thread.start();
!!!128514.java!!!	init() : void

        // make sure Swing components don't paint themselve
        NullRepaintManager.install();

        periodo = (int) 1000.0 / 30;

        //inizializzo lo ScreenManager
        screen = new WindowedScreenManager();

        //vedo se è diponibile la risoluzione 800x600 ritorna null se non è disponibile
        //DisplayMode displayMode = screen.findFirstCompatibleMode(POSSIBLE_MODES);

        //if(displayMode == null){
        //    System.out.println("il tuo sistema non supporta la risoluzione 800x600");
        //    lazilyExit();
        //}
        //else{
        //    screen.setFullScreen( displayMode, new JFrame());
        screen.setUpWindow(new JFrame());
        //    Window window = screen.getFullScreenWindow();

        Window window = screen.getWindow();

        window.setFont(new Font("Dialog", Font.PLAIN, FONT_SIZE));
        window.setBackground(BACK_COLOR);
        window.setForeground(FRONT_COLOR);

        isRunning = true;
        //}
!!!128642.java!!!	loadImage(in fileName : String) : Image

        return new ImageIcon(fileName).getImage();
!!!128770.java!!!	gameLoop() : void

        long startTime = System.currentTimeMillis();
        long currTime = startTime;

        int noDelays = 0;
        int overSleepTime = 0;
        long sleepTime = 0;
        
        while (isRunning) {

            long elapsedTime = System.currentTimeMillis() - currTime;
            currTime += elapsedTime;

            // update
            update(elapsedTime);

            // draw the screen
            Graphics2D g = screen.getGraphics();

            draw(g);
            g.dispose();

            //flip to screen
            screen.update();
            
            sleepTime = (periodo - elapsedTime) - overSleepTime;

            if (sleepTime > 0) {   // some time left in this cycle
                try {
                    Thread.sleep(sleepTime);  // already in ms
                } catch (InterruptedException ex) {
                }
            } else {    // sleepTime <= 0; the frame took longer than the period

                if (++noDelays >= NO_DELAYS_PER_YIELD) {
                    Thread.yield();   // give another thread a chance to run
                    noDelays = 0;
                }
            }
        }
